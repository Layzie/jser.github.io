// LICENSE : MIT
"use strict";
function isNode(node) {
  if (node == null) {
    return false;
  }
  return typeof node === "object" && (typeof node.type === "string" || typeof node.t === "string");
}
function TxtElement(node, path, wrap, ref) {
  this.node = node;
  this.path = path;
  this.wrap = wrap;
  this.ref = ref;
}

var BREAK = {}, SKIP = {}, REMOVE = {};
var VisitorOption = {
  Break: BREAK,
  Skip: SKIP,
  Remove: REMOVE
};
var Controller = function Controller() {};

Controller.prototype.__willStartTraverse = function (root, visitor) {
  this.__current = null;
  this.visitor = visitor;
  this.root = root;
  this.__worklist = [];
  this.__leavelist = [];
};

Controller.prototype.__execute = function (callback, element) {
  var previous, result;

  result = undefined;

  previous = this.__current;
  this.__current = element;
  if (callback) {
    result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
  }
  this.__current = previous;

  return result;
};

/**
 * Gets parent nodes of current node.
 * The parent nodes are returned in order from the closest parent to the outer ones.
 * Current node is {@link current}.
 * @returns {Array}
 * @public
 */
Controller.prototype.parents = function () {
  var result = [];
  for (var i = this.__leavelist.length - 1; i > 0; i--) {
    var parent = this.__leavelist[i].node;
    result.push(parent);
  }
  return result;
};

/**
 * Gets current node during traverse.
 * @returns {TxtNode}
 * @public
 */
Controller.prototype.current = function () {
  return this.__current.node;
};

Controller.prototype.traverse = function (root, visitor) {
  this.__willStartTraverse(root, visitor);

  var sentinel = {};

  // reference
  var worklist = this.__worklist;
  var leavelist = this.__leavelist;

  // initialize
  worklist.push(new TxtElement(root, null, null, null));
  leavelist.push(new TxtElement(null, null, null, null));

  while (worklist.length) {
    var element = worklist.pop();

    if (element === sentinel) {
      element = leavelist.pop();

      var ret = this.__execute(visitor.leave, element);

      if (ret === BREAK) {
        return;
      }
      continue;
    }

    if (element.node) {
      ret = this.__execute(visitor.enter, element);

      if (ret === BREAK) {
        return;
      }

      worklist.push(sentinel);
      leavelist.push(element);

      if (ret === SKIP) {
        continue;
      }

      var node = element.node;
      var nodeType = element.wrap || node.type;
      var candidates = Object.keys(node);

      var current = candidates.length;
      while ((current -= 1) >= 0) {
        var key = candidates[current];
        var candidate = node[key];
        if (!candidate) {
          continue;
        }

        if (Array.isArray(candidate)) {
          var current2 = candidate.length;
          while ((current2 -= 1) >= 0) {
            if (!candidate[current2]) {
              continue;
            }
            if (isNode(candidate[current2])) {
              element = new TxtElement(candidate[current2], [key, current2], null, null);
            } else {
              continue;
            }
            worklist.push(element);
          }
        } else if (isNode(candidate)) {
          worklist.push(new TxtElement(candidate, key, null, null));
        }
      }
    }
  }
};




function traverse(root, visitor) {
  var controller = new Controller();
  return controller.traverse(root, visitor);
}
exports.Controller = Controller;
exports.traverse = traverse;
exports.VisitorOption = VisitorOption;
//# sourceMappingURL=data:application/json;base64,